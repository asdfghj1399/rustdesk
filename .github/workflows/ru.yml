name: Build RustDesk (Windows)

on:
  workflow_dispatch:
    inputs:
      clean_build:
        description: "Perform clean rebuild"
        type: boolean
        default: false
      enable_hwcodec:
        description: "Enable hardware acceleration"
        type: boolean
        default: false

env:
  VERSION: "1.3.9"
  FLUTTER_VERSION: "3.24.5"
  RUST_VERSION: "1.75.0"
  VCPKG_COMMIT_ID: "6f29f12e82a8293156836ad81cc9bf5af41fe836"
  BUILD_TYPE: "release"
  TARGET_ARCH: "x86_64"
  VCPKG_DEFAULT_TRIPLET: "x64-windows-static"
  VCPKG_FORCE_SYSTEM_BINARIES: "1"

jobs:
  build:
    runs-on: windows-2022
    timeout-minutes: 120

    steps:
    - name: Clean workspace
      if: ${{ inputs.clean_build }}
      shell: powershell
      run: |
        Remove-Item -Recurse -Force "$env:GITHUB_WORKSPACE\vcpkg" -ErrorAction SilentlyContinue
        Remove-Item -Recurse -Force "$env:GITHUB_WORKSPACE\target" -ErrorAction SilentlyContinue

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install system dependencies
      shell: powershell
      run: |
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Set-ExecutionPolicy Bypass -Scope Process -Force
        $chocoInstallScript = Join-Path $env:TEMP 'choco-install.ps1'
        Invoke-WebRequest -Uri 'https://community.chocolatey.org/install.ps1' -OutFile $chocoInstallScript -UseBasicParsing
        & $chocoInstallScript
        Start-Sleep -Seconds 10
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1" -Force
        
        choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install -y git python --version=3.9.13
        choco install -y llvm --version=15.0.6
        choco install -y nasm
        
        $env:PATH = "C:\Program Files\CMake\bin;$env:PATH"
        $env:PATH = "C:\Program Files\LLVM\bin;$env:PATH"
        $env:PATH = "C:\Program Files\Git\cmd;$env:PATH"
        $env:PATH = "C:\Python39;$env:PATH"

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: x86_64-pc-windows-msvc
        components: rustfmt

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Patch Flutter engine
      shell: powershell
      run: |
        flutter doctor -v
        flutter precache --windows
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -Uri "https://github.com/rustdesk/engine/releases/download/main/windows-x64-release.zip" -OutFile "engine.zip"
        Expand-Archive -Path "engine.zip" -DestinationPath "engine"
        Move-Item -Force "engine\*" "C:\hostedtoolcache\windows\flutter\stable-$env:FLUTTER_VERSION-x64\bin\cache\artifacts\engine\windows-x64-release\"

    - name: Setup vcpkg (Fixed)
      shell: powershell
      run: |
        # 修复1：确保工作目录存在
        if (-not (Test-Path "$env:GITHUB_WORKSPACE")) {
            New-Item -ItemType Directory -Path "$env:GITHUB_WORKSPACE" -Force
        }
        
        # 修复2：更可靠的vcpkg克隆和初始化
        $vcpkgDir = "$env:GITHUB_WORKSPACE\vcpkg"
        if (-not (Test-Path $vcpkgDir)) {
            git config --global core.longpaths true
            git clone --depth 1 --branch $env:VCPKG_COMMIT_ID https://github.com/microsoft/vcpkg $vcpkgDir
        }
        
        # 修复3：显式检查目录存在性
        if (-not (Test-Path "$vcpkgDir\bootstrap-vcpkg.bat")) {
            throw "vcpkg bootstrap file not found after clone"
        }
        
        # 修复4：确保在正确目录执行命令
        Push-Location $vcpkgDir
        try {
            .\bootstrap-vcpkg.bat -disableMetrics
            .\vcpkg integrate install
        } finally {
            Pop-Location
        }

    - name: Install vcpkg dependencies (Fixed)
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        $vcpkgDir = "$env:GITHUB_WORKSPACE\vcpkg"
        
        # 修复5：确保vcpkg可执行文件存在
        if (-not (Test-Path "$vcpkgDir\vcpkg.exe")) {
            throw "vcpkg.exe not found at $vcpkgDir"
        }
        
        function Install-VcpkgPackage {
            param($package)
            $attempt = 1
            $maxAttempts = 3
            
            while ($attempt -le $maxAttempts) {
                try {
                    Write-Output "Attempt $attempt : Installing $package"
                    & "$vcpkgDir\vcpkg" install --triplet=$env:VCPKG_DEFAULT_TRIPLET $package
                    return
                } catch {
                    Write-Output "Attempt $attempt failed: $_"
                    if ($attempt -eq $maxAttempts) {
                        throw "Failed to install $package after $maxAttempts attempts"
                    }
                    Start-Sleep -Seconds (10 * $attempt)
                    $attempt++
                }
            }
        }
        
        # 基础依赖
        Install-VcpkgPackage "libvpx"
        Install-VcpkgPackage "libyuv"
        Install-VcpkgPackage "openssl"
        Install-VcpkgPackage "opus"
        
        # 视频编解码
        Install-VcpkgPackage "ffmpeg[core,avcodec,avformat,swresample,swscale]"
        Install-VcpkgPackage "aom[core]"
        
        # 可选硬件加速
        if ('${{ inputs.enable_hwcodec }}' -eq 'true') {
            Install-VcpkgPackage "nv-codec-headers"
        }

    - name: Build RustDesk
      shell: powershell
      run: |
        $argsList = @("--flutter", "--vram", "--portable", "--skip-portable-pack")
        if ('${{ inputs.enable_hwcodec }}' -eq 'true') {
            $argsList += "--hwcodec"
        }
        
        Write-Output "Building with arguments: $argsList"
        
        $attempt = 1
        $maxAttempts = 2
        $success = $false
        
        while ($attempt -le $maxAttempts -and -not $success) {
            try {
                python .\build.py $argsList
                if (Test-Path "flutter\build\windows\x64\runner\Release\rustdesk.exe") {
                    $success = $true
                } else {
                    throw "rustdesk.exe not found"
                }
            } catch {
                Write-Output "Attempt $attempt failed: $_"
                if ($attempt -eq $maxAttempts) {
                    throw "Build failed after $maxAttempts attempts"
                }
                Start-Sleep -Seconds (10 * $attempt)
                $attempt++
            }
        }

    - name: Package artifacts
      shell: powershell
      run: |
        New-Item -ItemType Directory -Path ".\dist" -Force
        Copy-Item -Path "flutter\build\windows\x64\runner\Release\*" -Destination ".\dist" -Recurse
        
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -Uri "https://github.com/rustdesk-org/rdev/releases/download/usbmmidd_v2/usbmmidd_v2.zip" -OutFile "usbmmidd.zip"
        Expand-Archive -Path "usbmmidd.zip" -DestinationPath ".\usbmmidd"
        Move-Item -Path ".\usbmmidd\x64\*" -Destination ".\dist\usbmmidd_v2" -Force
        
        Compress-Archive -Path ".\dist\*" -DestinationPath ".\rustdesk-$env:VERSION-portable.zip" -Force

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-windows
        path: |
          rustdesk-${{ env.VERSION }}-portable.zip
          dist\rustdesk.exe
        retention-days: 7
