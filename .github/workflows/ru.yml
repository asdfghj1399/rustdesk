name: Rust CI/CD Pipeline (修正版)

on:
  workflow_dispatch:
    inputs: # 手动触发参数区
      build-mode:
        description: '构建模式'
        type: choice
        options:
          - debug
          - release
        default: 'release'
      clean-cache:
        description: '清除缓存'
        type: boolean
        default: false

env:
  RUST_TOOLCHAIN: "1.75.0"
  TARGET_ARCH: "x86_64-pc-windows-msvc"
  CACHE_NAME: rust-cargo-cache

jobs:
  setup: # 环境准备工单
    runs-on: windows-latest
    steps:
      - name: Checkout Code 🛎️
        uses: actions/checkout@v3 # 重要: 使用可用的版本
        
      - name: Rust Toolchain 🦀
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ env.TARGET_ARCH }}

      - name: Cache Dependencies 📦
        uses: actions/cache@v3 # 使用确认存在的版本
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  build: # 构建工单
    needs: setup
    runs-on: windows-latest
    steps:
      - name: Clean Workspace (可选)
        if: ${{ inputs.clean-cache }}
        run: |
          cargo clean
          Remove-Item -Recurse $env:CARGO_HOME\registry\cache
          
      - name: Build Release 🛠️
        run: cargo build --${{ inputs.build-mode }}
        
      - name: Upload Artifact 🚀
        uses: actions/upload-artifact@v3 # 手动修复后的正确版本
        with: 
          name: binary-output
          path: |
            target/${{ inputs.build-mode }}/your-app.exe
            target/${{ inputs.build-mode }}/your-app.pdb
    
  test: # 测试工单
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - run: cargo test --all-features --verbose
