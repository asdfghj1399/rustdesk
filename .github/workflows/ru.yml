name: RustDesk CI/CD (终极修复版)

on:
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Perform full clean rebuild'
        type: boolean
        default: false

env:
  WORKSPACE: "${{ github.workspace }}\\src"
  VCPKG_ROOT: "C:\\vcpkg"
  CARGO_HOME: "${{ github.workspace }}\\.cargo"

jobs:
  setup:
    name: Environment Setup
    runs-on: windows-latest
    steps:
    - name: Initialize Directories
      shell: powershell
      run: |
        # 强制设置UTF-8编码环境
        $OutputEncoding = [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        chcp 65001 | Out-Null

        # 创建规范化路径
        $workspace = "$env:WORKSPACE" -replace '\\\\', '\'
        if (-not (Test-Path $workspace)) {
            New-Item -Path $workspace -ItemType Directory -Force | Out-Null
        }
        Write-Output "##[info]Workspace validated: $workspace"

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: "${{ env.WORKSPACE }}"
        clean: true
        fetch-depth: 0

    - name: Set File Permissions
      shell: powershell
      run: |
        # 获取绝对路径
        $fullPath = [System.IO.Path]::GetFullPath("$env:WORKSPACE")
        
        # 递归设置权限
        icacls "$fullPath" /grant "*S-1-1-0:(OI)(CI)F" /T /C /Q
        
        # 验证权限设置
        $acl = Get-ACL "$fullPath"
        Write-Output "##[info]Final permissions for $fullPath"
        $acl.Access | Format-Table IdentityReference, FileSystemRights -AutoSize

  build:
    needs: setup
    runs-on: windows-latest
    steps:
    - name: Build Preparation
      shell: powershell
      working-directory: "${{ env.WORKSPACE }}"
      run: |
        # 设置环境变量
        $env:Path += ";$env:VCPKG_ROOT;"
        $env:CARGO_TARGET_DIR = "${{ github.workspace }}\\target"

        # 显示关键路径
        Write-Output "##[group]Build Environment"
        Write-Output "Workspace: $pwd"
        Write-Output "VCPKG_ROOT: $env:VCPKG_ROOT"
        Write-Output "CARGO_HOME: $env:CARGO_HOME"
        Write-Output "##[endgroup]"

    - name: Build Project
      shell: powershell
      run: |
        # 使用绝对路径构建
        cargo build --release --manifest-path "$env:WORKSPACE\\Cargo.toml"
        
        # 验证产物存在性
        $exePath = "$env:CARGO_TARGET_DIR\\release\\rustdesk.exe"
        if (-not (Test-Path $exePath)) {
            Write-Output "::error::Build failed - Missing $exePath"
            Get-ChildItem "$env:CARGO_TARGET_DIR\\release"
            exit 1
        }

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: |
          ${{ env.CARGO_TARGET_DIR }}\\release\\rustdesk.exe
          ${{ env.CARGO_TARGET_DIR }}\\release\\*.dll
        retention-days: 7

  post-build:
    name: Cleanup
    needs: build
    if: always()
    runs-on: windows-latest
    steps:
    - name: Remove Temporary Files
      shell: powershell
      run: |
        Remove-Item -Path "$env:WORKSPACE\\target" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "$env:CARGO_HOME\\registry" -Recurse -Force -ErrorAction SilentlyContinue
