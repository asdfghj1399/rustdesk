name: Rust CI/CD Pipeline (修正版)

on:
  workflow_dispatch:
    inputs:
      build-mode:
        description: "构建模式"
        type: choice
        options: 
          - debug
          - release
        default: "release"
      clean-cache:
        description: "清除缓存"
        type: boolean
        default: false

env:
  RUST_TOOLCHAIN: "1.75.0"
  TARGET_ARCH: "x86_64-pc-windows-msvc"

jobs:
  setup:
    name: 环境准备
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码 ✔️
        uses: actions/checkout@v4

      - name: 安装Rust工具链 🦀
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ env.TARGET_ARCH }}

  build:
    name: 项目构建
    needs: setup
    runs-on: windows-latest
    steps:
      - name: 清理工作区 🔥
        if: ${{ inputs.clean-cache }}
        run: |
          Remove-Item -Recurse target -ErrorAction SilentlyContinue
          cargo clean

      - name: 设置缓存 📦
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 编译项目 🛠️
        run: cargo build --${{ inputs.build-mode }}

      - name: 上传产物 🚀
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            target/${{ inputs.build-mode }}/*.exe
            target/${{ inputs.build-mode }}/*.pdb

  test:
    name: 运行测试
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: cargo test --all-features
