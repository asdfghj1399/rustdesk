name: RustDesk Windows Build

on:
  workflow_dispatch:
    inputs:
      clean_build:
        description: "Perform full clean rebuild"
        type: boolean
        default: false

env:
  VCPKG_ROOT: "C:\\vcpkg"
  BUILD_DIR: "C:\\build_output"
  RUST_BACKTRACE: "full"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 90

    steps:
    - name: Clean workspace (if needed)
      if: ${{ inputs.clean_build }}
      shell: powershell
      run: |
        Remove-Item -Recurse -Force "$env:VCPKG_ROOT" -ErrorAction SilentlyContinue
        Remove-Item -Recurse -Force "$env:BUILD_DIR" -ErrorAction SilentlyContinue
        Remove-Item -Recurse -Force "target" -ErrorAction SilentlyContinue

    - name: Checkout code (with safe permissions)
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: src
        clean: true
        fetch-depth: 0

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: x86_64-pc-windows-msvc
        components: rustfmt, clippy

    - name: Install build dependencies
      shell: powershell
      run: |
        # 安装必要系统工具
        choco install -y cmake llvm nasm python --version=3.9.13
        refreshenv

        # 设置vcpkg
        if (-not (Test-Path "$env:VCPKG_ROOT")) {
          git clone https://github.com/microsoft/vcpkg "$env:VCPKG_ROOT"
          cd "$env:VCPKG_ROOT"
          .\bootstrap-vcpkg.bat -disableMetrics
        }

        # 安装依赖库
        & "$env:VCPKG_ROOT\vcpkg" install @(
          "libvpx[core]",
          "libyuv[core]",
          "openssl[core]"
        ) --triplet x64-windows --clean-after-build

    - name: Build RustDesk (with permission fix)
      shell: powershell
      run: |
        # 修复权限问题
        $ErrorActionPreference = "Stop"
        $buildType = "release"
        $env:CARGO_TARGET_DIR = "$env:BUILD_DIR"

        # 显式设置工作目录
        Set-Location -Path "$env:GITHUB_WORKSPACE\src"

        # 修复文件权限
        Get-ChildItem -Recurse | ForEach-Object {
          $_.Attributes = "Normal"
        }

        # 构建项目
        cargo build --$buildType --target x86_64-pc-windows-msvc -v

        # 验证输出
        $exePath = "$env:BUILD_DIR\x86_64-pc-windows-msvc\$buildType\rustdesk.exe"
        if (-not (Test-Path $exePath)) {
          Write-Output "::error::Build failed - Missing executable"
          exit 1
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-build
        path: |
          ${{ env.BUILD_DIR }}/x86_64-pc-windows-msvc/release/*.exe
          ${{ env.BUILD_DIR }}/x86_64-pc-windows-msvc/release/*.dll
        retention-days: 7
