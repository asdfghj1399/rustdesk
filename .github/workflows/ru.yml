name: CI/CD Pipeline with Manual Trigger

on:
  # 手动触发配置（网页显示运行按钮）
  workflow_dispatch:
    inputs:
      build-type:
        description: '选择构建类型'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
      clean-cache:
        description: '清除构建缓存'
        type: boolean
        default: false
      enable-tests:
        description: '运行单元测试'
        type: boolean
        default: true

  # 自动触发配置
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'      # Node.js版本
  RUST_VERSION: '1.75.0'  # Rust工具链版本
  CACHE_KEY: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}

jobs:
  setup:
    name: 初始化环境
    runs-on: ubuntu-latest
    steps:
      - name: Checkout代码 🛎️
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: x86_64-unknown-linux-gnu

  build:
    name: 构建项目
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: 清理缓存 🔥
        if: ${{ github.event.inputs.clean-cache }}
        run: |
          cargo clean
          rm -rf target/
          echo "缓存已清除"

      - name: 安装依赖 📦
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ env.CACHE_KEY }}

      - name: 项目构建 🛠️
        run: |
          cargo build --${{ inputs.build-type }}
          mkdir -p artifacts
          cp target/${{ inputs.build-type }}/*.exe artifacts/

      - name: 上传产物 🚀
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/
          if-no-files-found: error
          retention-days: 7

  test:
    name: 运行测试
    needs: build
    if: ${{ github.event.inputs.enable-tests }}
    runs-on: ubuntu-latest
    steps:
      - name: 下载产物
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./bin

      - name: 单元测试
        run: cargo test --verbose

      - name: 集成测试
        run: |
          ./bin/your-app-test
          echo "测试结果：$?"

  deploy:
    name: 部署生产
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: SSH部署
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            systemctl stop your-app
            cp -r ./artifacts /opt/your-app
            systemctl start your-app
