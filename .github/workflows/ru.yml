name: Build RustDesk (Windows)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RUST_VERSION: "1.75.0"
  FLUTTER_VERSION: "3.24.5"
  PYTHON_VERSION: "3.9.13"
  LLVM_VERSION: "15.0.6"
  NASM_VERSION: "2.16.01"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Flutter (Fixed)
      uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ env.RUST_VERSION }}
        targets: x86_64-pc-windows-msvc
        override: true
        components: rustfmt

    - name: Install system dependencies
      shell: powershell
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        $ProgressPreference = 'SilentlyContinue'
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        # 修复LLVM安装
        choco install -y llvm --version=$env:LLVM_VERSION --force --allow-downgrade

        # 使用winget安装Python
        winget install -e --id Python.Python.3.9 --version $env:PYTHON_VERSION

        # 多源NASM安装方案
        $nasmUrls = @(
            "https://github.com/ShiftMediaProject/nasm/releases/download/nasm-$env:NASM_VERSION-1/win64-nasm.zip",
            "https://sourceforge.net/projects/nasm.mirror/files/win64/$env:NASM_VERSION/nasm-$env:NASM_VERSION-win64.zip"
        )

        $nasmInstalled = $false
        foreach ($url in $nasmUrls) {
            try {
                Write-Output "尝试从 $url 下载NASM..."
                Invoke-WebRequest -Uri $url -OutFile "nasm.zip" -TimeoutSec 30
                Expand-Archive -Path "nasm.zip" -DestinationPath "C:\nasm" -Force
                if (Test-Path "C:\nasm\nasm.exe") {
                    $env:PATH = "C:\nasm;$env:PATH"
                    $nasmInstalled = $true
                    break
                }
            } catch {
                Write-Output "下载失败: $($_.Exception.Message)"
            }
        }

        if (-not $nasmInstalled) {
            # 备用方案：使用系统自带NASM
            if (Test-Path "C:\Program Files\NASM\nasm.exe") {
                $env:PATH += ";C:\Program Files\NASM"
            } elseif (Test-Path "$env:WINDIR\System32\nasm.exe") {
                Write-Output "使用系统自带的NASM"
            } else {
                throw "NASM安装失败"
            }
        }

        # 验证环境
        python --version
        nasm --version
        llvm-config --version

    - name: Build Project
      shell: powershell
      run: |
        # 添加具体构建命令
        echo "开始构建流程..."
