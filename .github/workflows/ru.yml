name: Build RustDesk (Windows)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.9.13"  # 明确指定稳定版本
  LLVM_VERSION: "15.0.6"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies (Fixed)
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        
        # 1. 安装Chocolatey（带重试）
        $maxRetries = 3
        $retryCount = 0
        while ($retryCount -lt $maxRetries) {
            try {
                Set-ExecutionPolicy Bypass -Scope Process -Force
                [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
                iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                break
            } catch {
                $retryCount++
                if ($retryCount -eq $maxRetries) { throw }
                Start-Sleep -Seconds (10 * $retryCount)
            }
        }

        # 2. 更新环境变量
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1" -Force
        $env:PATH = "C:\ProgramData\chocolatey\bin;$env:PATH"

        # 3. 安装基础工具（带版本锁定）
        choco upgrade -y cmake git --no-progress
        choco install -y python --version=$env:PYTHON_VERSION --no-progress
        choco install -y llvm --version=$env:LLVM_VERSION --no-progress
        choco install -y nasm --no-progress

        # 4. 验证Python安装
        python --version
        if (-not $?) { throw "Python installation failed" }

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: x86_64-pc-windows-msvc

    - name: Setup vcpkg
      shell: powershell
      run: |
        $vcpkgDir = "$env:GITHUB_WORKSPACE\vcpkg"
        if (Test-Path $vcpkgDir) { Remove-Item -Recurse -Force $vcpkgDir }
        
        git config --global core.longpaths true
        git clone https://github.com/microsoft/vcpkg $vcpkgDir
        cd $vcpkgDir
        git checkout $env:VCPKG_COMMIT_ID
        
        & "$vcpkgDir\bootstrap-vcpkg.bat" -disableMetrics
        & "$vcpkgDir\vcpkg" integrate install

    - name: Install vcpkg dependencies
      shell: powershell
      run: |
        $vcpkgExe = "$env:GITHUB_WORKSPACE\vcpkg\vcpkg"
        
        # 分步安装核心依赖
        $packages = @(
            "libvpx",
            "libyuv",
            "openssl",
            "opus",
            "ffmpeg[core,avcodec,avformat,swresample,swscale]",
            "aom[core]"
        )
        
        foreach ($pkg in $packages) {
            $attempt = 1
            while ($attempt -le 3) {
                try {
                    Write-Output "Installing $pkg (attempt $attempt)"
                    & $vcpkgExe install $pkg --triplet=$env:VCPKG_DEFAULT_TRIPLET
                    break
                } catch {
                    $attempt++
                    if ($attempt -gt 3) { throw }
                    Start-Sleep -Seconds (10 * $attempt)
                }
            }
        }

    - name: Build RustDesk
      shell: powershell
      run: |
        python .\build.py --flutter --vram --portable --skip-portable-pack

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-binaries
        path: flutter\build\windows\x64\runner\Release\rustdesk.exe
