name: "1️⃣ RustDesk Windows Build (Fixed)"

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build Type"
        required: true
        default: "release"
        type: choice
        options: ["release", "debug"]
      clean_build:
        description: "Clean before build"
        type: boolean
        default: false

env:
  VCPKG_ROOT: "C:\\vcpkg"
  VCPKG_DISABLE_METRICS: "true"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - name: "1️⃣ Checkout code"
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: "2️⃣ Setup vcpkg"
      shell: pwsh
      run: |
        if (-not (Test-Path "$env:VCPKG_ROOT\vcpkg.exe")) {
          git clone https://github.com/microsoft/vcpkg "$env:VCPKG_ROOT"
          cd "$env:VCPKG_ROOT"
          .\bootstrap-vcpkg.bat -disableMetrics
        }
        echo "VCPKG_ROOT=$env:VCPKG_ROOT" >> $env:GITHUB_ENV
        echo "$env:VCPKG_ROOT" >> $env:GITHUB_PATH

    - name: "3️⃣ Install dependencies (Fixed)"
      shell: pwsh
      run: |
        # 使用显式参数传递
        $installArgs = @(
          "install",
          "libvpx",
          "libyuv",
          "openssl",
          "hwcodec",
          "--triplet", "x64-windows",
          "--clean-after-build",
          "--recurse"
        )
        & "$env:VCPKG_ROOT\vcpkg" @installArgs

        # 验证安装结果
        if ($LASTEXITCODE -ne 0) {
          Write-Error "vcpkg install failed with exit code $LASTEXITCODE"
          exit 1
        }

    - name: "4️⃣ Clean build (optional)"
      if: ${{ inputs.clean_build }}
      shell: pwsh
      run: |
        cargo clean
        Remove-Item -Recurse -Force target -ErrorAction SilentlyContinue

    - name: "5️⃣ Build RustDesk"
      shell: pwsh
      run: |
        $buildType = "${{ inputs.build_type || 'release' }}"
        cargo build --$buildType --target x86_64-pc-windows-msvc -v
        
        $exePath = "target\x86_64-pc-windows-msvc\$buildType\rustdesk.exe"
        if (-not (Test-Path $exePath)) {
          Write-Output "::error::EXE not found at $exePath"
          Get-ChildItem -Recurse target\
          exit 1
        }
        echo "EXE_PATH=$exePath" >> $env:GITHUB_ENV

    - name: "6️⃣ Upload artifact"
      uses: actions/upload-artifact@v4
      with:
        name: "rustdesk-${{ inputs.build_type || 'release' }}"
        path: |
          ${{ env.EXE_PATH }}
          target\x86_64-pc-windows-msvc\${{ inputs.build_type || 'release' }}/*.dll
        retention-days: 7
        if-no-files-found: error
