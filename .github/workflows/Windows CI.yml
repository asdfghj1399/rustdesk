name: "🚀 RustDesk Windows Build (Verified)"

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Select build configuration"
        required: true
        default: "release"
        type: choice
        options: ["release", "debug"]

env:
  VCPKG_ROOT: "C:\\vcpkg"
  BUILD_DIR: "C:\\build_output"
  WORKSPACE: "${{ github.workspace }}\\rustdesk"  # 明确项目子目录

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - name: "1️⃣ Checkout Repository (Full Depth)"
      uses: actions/checkout@v4
      with:
        path: rustdesk  # 明确检出到子目录
        submodules: recursive
        fetch-depth: 0  # 获取完整历史

    - name: "2️⃣ Validate Project Structure"
      shell: powershell
      run: |
        # 严格验证项目结构
        $requiredFiles = @("Cargo.toml", "src/main.rs")
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path "$env:WORKSPACE\$file")) {
            Write-Output "::error::Missing required file: $file"
            Get-ChildItem -Recurse "$env:WORKSPACE"
            exit 1
          }
        }
        echo "PROJECT_VALIDATED=true" >> $env:GITHUB_ENV

    - name: "3️⃣ Setup Build Environment"
      shell: powershell
      run: |
        # 初始化构建目录
        New-Item -ItemType Directory -Path "$env:BUILD_DIR" -Force | Out-Null
        
        # 安装vcpkg（带重试）
        $maxRetries = 3
        $retryCount = 0
        while ($retryCount -lt $maxRetries) {
          try {
            if (-not (Test-Path "$env:VCPKG_ROOT\vcpkg.exe")) {
              git clone https://github.com/microsoft/vcpkg "$env:VCPKG_ROOT"
              & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat" -disableMetrics
            }
            break
          } catch {
            $retryCount++
            if ($retryCount -eq $maxRetries) { throw }
            Start-Sleep -Seconds 10
          }
        }

    - name: "4️⃣ Install Dependencies"
      shell: powershell
      working-directory: ${{ env.WORKSPACE }}
      run: |
        & "$env:VCPKG_ROOT\vcpkg" install @(
          "libvpx",
          "libyuv",
          "openssl"
        ) --triplet x64-windows --clean-after-build

    - name: "5️⃣ Build Project"
      shell: powershell
      working-directory: ${{ env.WORKSPACE }}
      run: |
        $env:CARGO_TARGET_DIR = "$env:BUILD_DIR"
        
        # 带诊断信息的构建
        cargo build --${{ inputs.build_type }} `
          --target x86_64-pc-windows-msvc `
          -v --message-format=json | Tee-Object -FilePath build_log.json
        
        # 解析构建日志验证结果
        if (-not (Test-Path "$env:BUILD_DIR\x86_64-pc-windows-msvc\${{ inputs.build_type }}\rustdesk.exe")) {
          Write-Output "::error::Build Failed - Diagnostics:"
          Get-Content build_log.json | Where-Object { $_ -match '"reason":"compiler-message"' }
          exit 1
        }

    - name: "6️⃣ Upload Artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-${{ inputs.build_type }}-${{ github.run_number }}
        path: |
          ${{ env.BUILD_DIR }}/x86_64-pc-windows-msvc/${{ inputs.build_type }}/rustdesk.exe
          ${{ env.BUILD_DIR }}/x86_64-pc-windows-msvc/${{ inputs.build_type }}/*.dll
        retention-days: 7
