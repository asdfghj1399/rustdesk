name: Windows Build with Artifacts

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VCPKG_COMMIT_ID: "b2cb0da531c2f1f740045bfe7c4dac59f0b2b69c"

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build Windows EXE
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup vcpkg (self-contained)
      shell: pwsh
      run: |
        # 独立安装vcpkg（不使用缓存）
        $vcpkgDir = "C:\vcpkg"
        if (-not (Test-Path $vcpkgDir)) {
            git clone https://github.com/microsoft/vcpkg $vcpkgDir
        }
        cd $vcpkgDir
        git checkout $env:VCPKG_COMMIT_ID
        .\bootstrap-vcpkg.bat
        $env:VCPKG_ROOT = $vcpkgDir
        echo "VCPKG_ROOT=$vcpkgDir" >> $env:GITHUB_ENV

    - name: Install dependencies
      shell: pwsh
      run: |
        & "$env:VCPKG_ROOT\vcpkg" install --triplet x64-windows libvpx libyuv openssl
        if ($LASTEXITCODE -ne 0) { exit 1 }

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: x86_64-pc-windows-msvc

    - name: Build Release
      shell: pwsh
      run: |
        cargo build --release --target x86_64-pc-windows-msvc
        if (-not (Test-Path "target\x86_64-pc-windows-msvc\release\rustdesk.exe")) {
            Write-Error "EXE file not found!"
            exit 1
        }

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: RustDesk-Windows
        path: |
          target\x86_64-pc-windows-msvc\release\rustdesk.exe
          target\x86_64-pc-windows-msvc\release\*.dll
        retention-days: 3
