name: "üöÄ RustDesk Windows Build (Stable)"

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Select build configuration"
        required: true
        default: "release"
        type: choice
        options: ["release", "debug"]

env:
  VCPKG_ROOT: "C:\\vcpkg"
  BUILD_DIR: "C:\\build_output"
  RUST_BACKTRACE: "full"  # ÂêØÁî®ÂÆåÊï¥ÈîôËØØÂõûÊ∫Ø

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - name: "1Ô∏è‚É£ Initialize Environment"
      shell: powershell
      run: |
        # ËÆæÁΩÆUTF-8ÁºñÁ†ÅÁéØÂ¢É
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $env:Path += ";$env:VCPKG_ROOT"
        
        # Ê∏ÖÁêÜÂ∑•‰ΩúÁõÆÂΩï
        if (Test-Path "$env:BUILD_DIR") {
          Remove-Item -Recurse -Force "$env:BUILD_DIR"
        }
        New-Item -ItemType Directory -Path "$env:BUILD_DIR" -Force | Out-Null

    - name: "2Ô∏è‚É£ Install vcpkg"
      shell: powershell
      run: |
        if (-not (Test-Path "$env:VCPKG_ROOT\vcpkg.exe")) {
          git clone https://github.com/microsoft/vcpkg "$env:VCPKG_ROOT"
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat" -disableMetrics
        }
        echo "VCPKG_ROOT=$env:VCPKG_ROOT" >> $env:GITHUB_ENV

    - name: "3Ô∏è‚É£ Install Dependencies"
      shell: powershell
      run: |
        try {
          & "$env:VCPKG_ROOT\vcpkg" install @(
            "libvpx",
            "libyuv",
            "openssl"
          ) --triplet x64-windows --clean-after-build
          
          if ($LASTEXITCODE -ne 0) {
            Write-Output "::error::Dependency installation failed"
            exit 1
          }
        } catch {
          Write-Output "::error::$_"
          exit 1
        }

    - name: "4Ô∏è‚É£ Build Project (Safe Mode)"
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        $buildType = "${{ inputs.build_type }}"
        
        try {
          # ËÆæÁΩÆÊûÑÂª∫ÁõÆÂΩï
          $env:CARGO_TARGET_DIR = "$env:BUILD_DIR"
          
          # È¶ñÊ¨°ÊûÑÂª∫Â∞ùËØï
          cargo build --$buildType --target x86_64-pc-windows-msvc -v
          
          if ($LASTEXITCODE -ne 0) {
            Write-Output "::warning::First build attempt failed, retrying..."
            cargo clean
            cargo build --$buildType --target x86_64-pc-windows-msvc -v
          }
          
          # È™åËØÅËæìÂá∫Êñá‰ª∂
          $exePath = "$env:BUILD_DIR\x86_64-pc-windows-msvc\$buildType\rustdesk.exe"
          if (-not (Test-Path $exePath)) {
            Write-Output "::error::Executable not found at $exePath"
            Get-ChildItem -Recurse "$env:BUILD_DIR"
            exit 1
          }
          
          echo "EXE_PATH=$exePath" >> $env:GITHUB_ENV
        } catch {
          Write-Output "::error::Build failed: $_"
          exit 1
        }

    - name: "5Ô∏è‚É£ Upload Artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-${{ inputs.build_type }}-${{ github.run_number }}
        path: |
          ${{ env.EXE_PATH }}
          ${{ env.BUILD_DIR }}/x86_64-pc-windows-msvc/${{ inputs.build_type }}/*.dll
        retention-days: 7
        if-no-files-found: error
