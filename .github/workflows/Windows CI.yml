name: "1️⃣ RustDesk Windows Build (Final)"

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build Type"
        required: true
        default: "release"
        type: choice
        options: ["release", "debug"]

env:
  VCPKG_ROOT: "C:\\vcpkg"
  VCPKG_DISABLE_METRICS: "true"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - name: "1️⃣ Checkout code"
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: "2️⃣ Setup vcpkg (Safe Mode)"
      shell: pwsh
      run: |
        # 安全清理逻辑
        if (Test-Path "$env:VCPKG_ROOT") {
          # 仅删除vcpkg.exe保留已下载的库
          Remove-Item -Force "$env:VCPKG_ROOT\vcpkg.exe" -ErrorAction SilentlyContinue
          Remove-Item -Force "$env:VCPKG_ROOT\vcpkg_installed" -ErrorAction SilentlyContinue
        } else {
          New-Item -ItemType Directory -Path "$env:VCPKG_ROOT" -Force
        }

        # 安装/更新vcpkg
        Set-Location "$env:VCPKG_ROOT"
        if (-not (Test-Path ".git")) {
          git clone https://github.com/microsoft/vcpkg .
        }
        git pull
        .\bootstrap-vcpkg.bat -disableMetrics
        echo "$env:VCPKG_ROOT" >> $env:GITHUB_PATH

    - name: "3️⃣ Install Dependencies (Robust)"
      shell: pwsh
      run: |
        Set-Location "$env:VCPKG_ROOT"
        $retryCount = 0
        $maxRetry = 2
        
        :install_loop while ($retryCount -lt $maxRetry) {
          try {
            .\vcpkg install @(
              "libvpx[core]",
              "libyuv[core]",
              "openssl[core]",
              "hwcodec[core]"
            ) --triplet x64-windows `
              --clean-after-build `
              --recurse
            
            if ($LASTEXITCODE -eq 0) {
              break install_loop
            }
          } catch {
            Write-Output "Attempt $($retryCount + 1) failed: $_"
          }
          $retryCount++
          if ($retryCount -lt $maxRetry) {
            Start-Sleep -Seconds 30
          }
        }
        
        if ($retryCount -eq $maxRetry) {
          Write-Output "::error::All installation attempts failed"
          exit 1
        }

    - name: "4️⃣ Build Project"
      shell: pwsh
      run: |
        $buildType = "${{ inputs.build_type }}"
        cargo build --$buildType --target x86_64-pc-windows-msvc -v
        
        $exePath = "target\x86_64-pc-windows-msvc\$buildType\rustdesk.exe"
        if (-not (Test-Path $exePath)) {
          Write-Output "::error::Build failed - Missing EXE"
          Get-ChildItem -Recurse target\
          exit 1
        }
        echo "EXE_PATH=$exePath" >> $env:GITHUB_ENV

    - name: "5️⃣ Upload Artifact"
      uses: actions/upload-artifact@v4
      with:
        name: "rustdesk-${{ inputs.build_type }}-${{ github.run_id }}"
        path: |
          ${{ env.EXE_PATH }}
          target\x86_64-pc-windows-msvc\${{ inputs.build_type }}/*.dll
        retention-days: 7
        if-no-files-found: error
