name: "1️⃣ RustDesk Windows Build (Final Fixed)"

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build Configuration"
        required: true
        default: "release"
        type: choice
        options: ["release", "debug"]

env:
  VCPKG_ROOT: "C:\\vcpkg"
  VCPKG_DISABLE_METRICS: "true"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - name: "1️⃣ Checkout code"
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: "2️⃣ Setup vcpkg (With Custom Ports)"
      shell: pwsh
      run: |
        # 清理并初始化vcpkg
        if (Test-Path "$env:VCPKG_ROOT") {
          Remove-Item -Recurse -Force "$env:VCPKG_ROOT" -ErrorAction SilentlyContinue
        }
        git clone https://github.com/microsoft/vcpkg "$env:VCPKG_ROOT"
        cd "$env:VCPKG_ROOT"
        
        # 添加自定义hwcodec端口
        $hwcodecPort = @"
        {
          "name": "hwcodec",
          "version-string": "1.0",
          "port-version": 1,
          "description": "Hardware accelerated codecs",
          "homepage": "https://github.com/rustdesk/hwcodec",
          "dependencies": ["libyuv", "libvpx"]
        }
        "@
        New-Item -ItemType Directory -Path "$env:VCPKG_ROOT\ports\hwcodec"
        $hwcodecPort | Out-File -FilePath "$env:VCPKG_ROOT\ports\hwcodec\vcpkg.json"
        
        .\bootstrap-vcpkg.bat -disableMetrics
        echo "$env:VCPKG_ROOT" >> $env:GITHUB_PATH

    - name: "3️⃣ Install Dependencies"
      shell: pwsh
      run: |
        cd "$env:VCPKG_ROOT"
        
        # 基础依赖
        .\vcpkg install @(
          "libvpx[core]",
          "libyuv[core]",
          "openssl[core]"
        ) --triplet x64-windows --clean-after-build
        
        # 特殊处理hwcodec
        if (-not (Test-Path "$env:VCPKG_ROOT\installed\x64-windows\include\hwcodec")) {
          Write-Output "::warning::hwcodec not found, using software fallback"
          echo "CARGO_FEATURES=--no-default-features" >> $env:GITHUB_ENV
        }

    - name: "4️⃣ Build RustDesk"
      shell: pwsh
      run: |
        $buildType = "${{ inputs.build_type }}"
        $features = if ($env:CARGO_FEATURES) { $env:CARGO_FEATURES } else { "" }
        
        cargo build --$buildType --target x86_64-pc-windows-msvc $features -v
        
        $exePath = "target\x86_64-pc-windows-msvc\$buildType\rustdesk.exe"
        if (-not (Test-Path $exePath)) {
          Write-Output "::error::Build failed - Missing EXE"
          Get-ChildItem -Recurse target\
          exit 1
        }
        echo "EXE_PATH=$exePath" >> $env:GITHUB_ENV

    - name: "5️⃣ Upload Artifact"
      uses: actions/upload-artifact@v4
      with:
        name: "rustdesk-${{ inputs.build_type }}-${{ github.run_id }}"
        path: |
          ${{ env.EXE_PATH }}
          target\x86_64-pc-windows-msvc\${{ inputs.build_type }}/*.dll
        retention-days: 7
        if-no-files-found: error
