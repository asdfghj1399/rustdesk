name: "üöÄ RustDesk Windows Build (Stable)"

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Select build configuration"
        required: true
        default: "release"
        type: choice
        options: ["release", "debug"]

env:
  VCPKG_ROOT: "C:\\vcpkg"
  BUILD_DIR: "C:\\build_output"
  WORKSPACE: "${{ github.workspace }}"  # ÂÖ≥ÈîÆ‰øÆÂ§çÔºöÊòæÂºèÂ£∞ÊòéÂ∑•‰ΩúÁõÆÂΩï

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - name: "1Ô∏è‚É£ Checkout Repository"
      uses: actions/checkout@v4
      with:
        path: src  # ÊòéÁ°ÆÊåáÂÆöÊ£ÄÂá∫ÁõÆÂΩï
        submodules: recursive

    - name: "2Ô∏è‚É£ Initialize Environment"
      shell: powershell
      run: |
        # ËÆæÁΩÆÂ∑•‰ΩúÁõÆÂΩïÔºàÂÖ≥ÈîÆ‰øÆÂ§çÔºâ
        $env:WORKSPACE = "$pwd\src"
        cd $env:WORKSPACE
        
        # È™åËØÅÊ∫êÁ†ÅÁªìÊûÑ
        if (-not (Test-Path "Cargo.toml")) {
          Write-Output "::error::Cargo.toml not found in $pwd"
          Get-ChildItem -Recurse
          exit 1
        }
        
        # ËÆæÁΩÆÊûÑÂª∫ÁéØÂ¢É
        New-Item -ItemType Directory -Path "$env:BUILD_DIR" -Force | Out-Null

    - name: "3Ô∏è‚É£ Install vcpkg"
      shell: powershell
      run: |
        if (-not (Test-Path "$env:VCPKG_ROOT\vcpkg.exe")) {
          git clone https://github.com/microsoft/vcpkg "$env:VCPKG_ROOT"
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat" -disableMetrics
        }
        echo "VCPKG_ROOT=$env:VCPKG_ROOT" >> $env:GITHUB_ENV

    - name: "4Ô∏è‚É£ Install Dependencies"
      shell: powershell
      working-directory: ${{ env.WORKSPACE }}  # Á°Æ‰øùÂú®Ê≠£Á°ÆÁõÆÂΩïÊâßË°å
      run: |
        & "$env:VCPKG_ROOT\vcpkg" install @(
          "libvpx",
          "libyuv",
          "openssl"
        ) --triplet x64-windows --clean-after-build

    - name: "5Ô∏è‚É£ Build Project"
      shell: powershell
      working-directory: ${{ env.WORKSPACE }}
      run: |
        $ErrorActionPreference = "Stop"
        $buildType = "${{ inputs.build_type }}"
        $env:CARGO_TARGET_DIR = "$env:BUILD_DIR"
        
        # È¶ñÊ¨°ÊûÑÂª∫
        cargo build --$buildType --target x86_64-pc-windows-msvc -v
        
        # È™åËØÅËæìÂá∫
        $exePath = "$env:BUILD_DIR\x86_64-pc-windows-msvc\$buildType\rustdesk.exe"
        if (-not (Test-Path $exePath)) {
          Write-Output "::error::Build failed - Missing output file"
          Get-ChildItem -Recurse "$env:BUILD_DIR"
          exit 1
        }
        echo "EXE_PATH=$exePath" >> $env:GITHUB_ENV

    - name: "6Ô∏è‚É£ Upload Artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-${{ inputs.build_type }}-${{ github.run_number }}
        path: |
          ${{ env.EXE_PATH }}
          ${{ env.BUILD_DIR }}/x86_64-pc-windows-msvc/${{ inputs.build_type }}/*.dll
        retention-days: 7
        if-no-files-found: error
